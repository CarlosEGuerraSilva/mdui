/**
 * mdui-chip 组件。默认为 variant="assist"
 */
:host {
  --shape-corner: var(--mdui-shape-corner-small);

  position: relative;
  display: inline-block;
  flex-shrink: 0;
  overflow: hidden;
  border-radius: var(--shape-corner);
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  .transition(box-shadow, short4, linear);
  .height(32);
  .background-color(surface);
  .border(1px, solid, outline);
  .color(on-surface-variant);
  .typescale(label-large);
  .state-layer-color(on-surface-variant);
}

.button {
  .padding-right(7);
  .padding-left(7);

  :host([variant="input"]) & {
    .padding-right(3);
    .padding-left(3);
  }

  :host([selected]:not([selected="false" i])) & {
    .padding-right(8);
    .padding-left(8);
  }

  :host([selected][variant="input"]:not([selected="false" i])) & {
    .padding-right(4);
    .padding-left(4);
  }

  :host([elevated]:not([elevated="false" i])) & {
    .padding-right(8);
    .padding-left(8);
  }
}

:host([variant="assist"]) {
  .color(on-surface);
  .state-layer-color(on-surface);
}

:host([elevated]:not([elevated="false" i])) {
  border-width: 0;
  .background-color(surface-container-low);
  .elevation(1);
}

:host([selected]:not([selected="false" i])) {
  .color(on-secondary-container);
  .background-color(secondary-container);
  .border-width(0);
  .state-layer-color(on-secondary-container);
}

:host([disabled]:not([disabled="false" i])),
:host([loading]:not([loading="false" i])) {
  cursor: default;
  pointer-events: none;
}

:host([disabled]:not([disabled="false" i])) {
  .border-color(on-surface, 12%);
  .color(on-surface, 38%);
  .elevation(0);
}

:host([disabled][elevated]:not([disabled="false" i], [elevated="false" i])),
:host([disabled][selected]:not([disabled="false" i], [selected="false" i])) {
  .background-color(on-surface, 12%);
}

:host([selected][hover]:not([selected="false" i])) {
  .elevation(1);
}

:host([elevated][hover]:not([elevated="false" i])) {
  .color(on-secondary-container);
  .elevation(2);
}

:host([variant="filter"][hover]),
:host([variant="input"][hover]),
:host([variant="suggestion"][hover]) {
  .color(on-surface-variant);
}

:host([variant="filter"][focus-visible]),
:host([variant="input"][focus-visible]),
:host([variant="suggestion"][focus-visible]) {
  .border-color(on-surface-variant);
}

:host([dragged]),
:host([dragged][hover]) {
  .elevation(4);
}

.button {
  overflow: visible;
}

.label {
  display: inline-flex;
  .padding-right(8);
  .padding-left(8);
}

.icon,
.selected-icon,
.end-icon {
  display: inline-flex;
  // 图标 font-size 为 18px，文案为 14px
  font-size: unit((18 / 14), em);
  .color(on-surface-variant);

  :host([variant="assist"]) & {
    .color(primary);
  }

  :host([selected]:not([selected="false" i])) & {
    .color(on-secondary-container);
  }

  :host([disabled]:not([disabled="false" i])) & {
    opacity: 0.38;
    .color(on-surface);
  }
}

.icon .i,
.selected-icon .i,
.end-icon .i,
::slotted([slot="icon"]),
::slotted([slot="selected-icon"]),
::slotted([slot="end-icon"]) {
  font-size: inherit;
}

:host([variant="input"]) {
  .has-icon {
    .icon,
    .selected-icon,
    mdui-circular-progress {
      .margin-left(4);
    }
  }

  .has-end-icon {
    .end-icon {
      .margin-right(4);
    }
  }
}

mdui-circular-progress {
  display: inline-flex;
  .width(18);
  .height(18);

  :host([disabled]:not([disabled="false" i])) & {
    .stroke(on-surface, 38%)
  }
}

::slotted(mdui-avatar[slot="icon"]),
::slotted(mdui-avatar[slot="end-icon"]),
::slotted(mdui-avatar[slot="selected-icon"]) {
  .width(24);
  .height(24);

  :host([disabled]:not([disabled="false" i])) & {
    opacity: 0.38;
  }
}

::slotted(mdui-avatar[slot="icon"]),
::slotted(mdui-avatar[slot="selected-icon"]) {
  .margin-left(-4);
  .margin-right(-2);
}

::slotted(mdui-avatar[slot="end-icon"]) {
  .margin-right(-4);
  .margin-left(-2);
}

.delete-icon {
  display: inline-flex;
  // 图标 font-size 为 18px，文案为 14px
  font-size: unit((18 / 14), em);
  .transition(background-color, short4, linear);
  .shape-corner(full);
  .margin-right(-4);
  .margin-left(-4);
  .padding(4);
  .color(on-surface-variant);

  &:hover {
    .background-color(on-surface-variant, 12%);
  }

  .has-end-icon & {
    .margin-left(4);
  }

  :host([variant="assiat"]) & {
    .color(primary);
  }

  :host([variant="input"]) & {
    .margin-right(1);
  }

  :host([disabled]:not([disabled="false" i])) & {
    .color(on-surface, 38%);
  }
}

.delete-icon .i,
::slotted([slot="delete-icon"]) {
  font-size: inherit;
}

::slotted(mdui-avatar[slot="delete-icon"]) {
  .width(18);
  .height(18);
}
